{"title":"P3834 【模板】可持久化线段树 1（主席树）","date":"2018-10-21T14:34:22.000Z","slug":"【模板】可持久化线段树 1（主席树）","tags":["Luogu","模板"],"updated":"2018-10-27T15:31:18.204Z","content":"<h3 id=\"题面\"><a href=\"#题面\" class=\"headerlink\" title=\"题面\"></a>题面</h3><h3 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h3><p>这是个非常经典的主席树入门题——静态区间第K小<br>数据已经过加强，请使用主席树。同时请注意常数优化</p>\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>如题，给定N个正整数构成的序列，将对于指定的闭区间查询其区间内的第K小值。</p>\n<h3 id=\"输入输出格式\"><a href=\"#输入输出格式\" class=\"headerlink\" title=\"输入输出格式\"></a>输入输出格式</h3><h4 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h4><p>第一行包含两个正整数N、M，分别表示序列的长度和查询的个数。<br>第二行包含N个正整数，表示这个序列各项的数字。<br>接下来M行每行包含三个整数 l, r, kl,r,k , 表示查询区间[l, r][l,r]内的第k小值。</p>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><p>输出包含k行，每行1个正整数，依次表示每一次查询的结果</p>\n<h3 id=\"输入输出样例\"><a href=\"#输入输出样例\" class=\"headerlink\" title=\"输入输出样例\"></a>输入输出样例</h3><blockquote>\n<p>输入样例#1：<br>5 5<br>25957 6405 15770 26287 26465<br>2 2 1<br>3 4 1<br>4 5 1<br>1 2 2<br>4 4 1<br>输出样例#1：<br>6405<br>15770<br>26287<br>25957<br>26287</p>\n</blockquote>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><h4 id=\"数据范围：\"><a href=\"#数据范围：\" class=\"headerlink\" title=\"数据范围：\"></a>数据范围：</h4><p><del>复制过来很奇怪，就算了吧……</del></p>\n<hr>\n<p>主席树的确对我来说是个难点<del>不像之前的某树</del>，</p>\n<p><del>分析可能暂时要咕咕咕了……</del></p>\n<p>先上代码吧……<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> REP(i,a,b) for (int i=(a);i&lt;=(b);++i)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num,qu_es;</span><br><span class=\"line\"><span class=\"keyword\">int</span> siz;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 200010</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> T[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[maxn&lt;&lt;<span class=\"number\">5</span>],s_la[maxn&lt;&lt;<span class=\"number\">5</span>],s_lb[maxn&lt;&lt;<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> la,<span class=\"keyword\">int</span> lb)</span></span>&#123;</span><br><span class=\"line\">\tcnt++;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> root=cnt;</span><br><span class=\"line\">\tsum[root]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (la&lt;lb)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid=(la+lb)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ts_la[root]=build(la,mid);</span><br><span class=\"line\">\t\ts_lb[root]=build(mid+<span class=\"number\">1</span>,lb);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> pre,<span class=\"keyword\">int</span> la,<span class=\"keyword\">int</span> lb,<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"comment\">//注意！pre表示前缀！ </span></span><br><span class=\"line\">\tcnt++;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> root=cnt;</span><br><span class=\"line\">\ts_la[root]=s_la[pre];s_lb[root]=s_lb[pre];sum[root]=sum[pre]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (la&lt;lb)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid=(la+lb)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (x&lt;=mid) s_la[root]=update(s_la[pre],la,mid,x);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> s_lb[root]=update(s_lb[pre],mid+<span class=\"number\">1</span>,lb,x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> la,<span class=\"keyword\">int</span> lb,<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (la&gt;=lb) <span class=\"keyword\">return</span> la;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid=(la+lb)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x=sum[s_la[v]]-sum[s_la[u]];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x&gt;=k) <span class=\"keyword\">return</span> query(s_la[u],s_la[v],la,mid,k);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> query(s_lb[u],s_lb[v],mid+<span class=\"number\">1</span>,lb,k-x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],b[maxn];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;num&gt;&gt;qu_es;</span><br><span class=\"line\">\tREP(i,<span class=\"number\">1</span>,num) <span class=\"built_in\">cin</span>&gt;&gt;a[i],b[i]=a[i];</span><br><span class=\"line\">\tsort(b+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>+num);</span><br><span class=\"line\">\tsiz=unique(b+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>+num)-b<span class=\"number\">-1</span>;</span><br><span class=\"line\">\tT[<span class=\"number\">0</span>]=build(<span class=\"number\">1</span>,siz);</span><br><span class=\"line\">\tREP(i,<span class=\"number\">1</span>,num)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t=lower_bound(b+<span class=\"number\">1</span>,b+<span class=\"number\">1</span>+siz,a[i])-b;<span class=\"comment\">//lower_bound用法：二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end </span></span><br><span class=\"line\">\t\tT[i]=update(T[i<span class=\"number\">-1</span>],<span class=\"number\">1</span>,siz,t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tREP(i,<span class=\"number\">1</span>,qu_es)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x,y,z; <span class=\"built_in\">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t=query(T[x<span class=\"number\">-1</span>],T[y],<span class=\"number\">1</span>,siz,z);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;b[t]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"哈希基础","slug":"hash"},"next":{"title":"输入输出模板","slug":"输入输出模板"},"link":"http://yoursite.com/post/【模板】可持久化线段树 1（主席树）/"}