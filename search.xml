<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>差分基础</title>
      <link href="/chafen/"/>
      <url>/chafen/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>哈希基础</title>
      <link href="/hash/"/>
      <url>/hash/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 知识梳理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P3834 【模板】可持久化线段树 1（主席树）</title>
      <link href="/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91%201%EF%BC%88%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%89/"/>
      <url>/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91%201%EF%BC%88%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>这是个非常经典的主席树入门题——静态区间第K小<br>数据已经过加强，请使用主席树。同时请注意常数优化</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>如题，给定N个正整数构成的序列，将对于指定的闭区间查询其区间内的第K小值。</p><h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>第一行包含两个正整数N、M，分别表示序列的长度和查询的个数。<br>第二行包含N个正整数，表示这个序列各项的数字。<br>接下来M行每行包含三个整数 l, r, kl,r,k , 表示查询区间[l, r][l,r]内的第k小值。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出包含k行，每行1个正整数，依次表示每一次查询的结果</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><blockquote><p>输入样例#1：<br>5 5<br>25957 6405 15770 26287 26465<br>2 2 1<br>3 4 1<br>4 5 1<br>1 2 2<br>4 4 1<br>输出样例#1：<br>6405<br>15770<br>26287<br>25957<br>26287</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h4 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h4><p><del>复制过来很奇怪，就算了吧……</del></p><hr><p>主席树的确对我来说是个难点<del>不像之前的某树</del>，</p>]]></content>
      
      
      
        <tags>
            
            <tag> Luogu </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>输入输出模板</title>
      <link href="/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A8%A1%E6%9D%BF/"/>
      <url>/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="忘记从哪里学来的板子了，因为很常用，就发上来看一下吧……"><a href="#忘记从哪里学来的板子了，因为很常用，就发上来看一下吧……" class="headerlink" title="忘记从哪里学来的板子了，因为很常用，就发上来看一下吧……"></a>忘记从哪里学来的板子了，因为很常用，就发上来看一下吧……</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> w=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'-'</span>) w=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _write(<span class="keyword">int</span> x)&#123;</span><br><span class="line"><span class="keyword">if</span> (x/<span class="number">10</span>&gt;<span class="number">0</span>) _write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">x=-x;</span><br><span class="line">&#125;</span><br><span class="line">_write(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P3372 【模板】线段树 1</title>
      <link href="/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%201/"/>
      <url>/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%201/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>如题，已知一个数列，你需要进行下面两种操作：<br>1.将某区间每一个数加上x<br>2.求出某区间每一个数的和</p><h4 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h4><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>第一行包含两个整数N、M，分别表示该数列数字的个数和操作的总个数。<br>第二行包含N个用空格分隔的整数，其中第i个数字表示数列第i项的初始值。<br>接下来M行每行包含3或4个整数，表示一个操作，具体如下：<br>操作1： 格式：1 x y k 含义：将区间[x,y]内每个数加上k<br>操作2： 格式：2 x y 含义：输出区间[x,y]内每个数的和</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>输出包含若干行整数，即为所有操作2的结果。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><blockquote><p>输入样例#1：<br>5 5<br>1 5 4 2 3<br>2 2 4<br>1 2 3 2<br>2 3 4<br>1 1 5 1<br>2 1 4<br>输出样例#1：<br>11<br>8<br>20</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>时空限制：1000ms,128M<br>数据规模：<br>对于30%的数据：N&lt;=8，M&lt;=10<br>对于70%的数据：N&lt;=1000，M&lt;=10000<br>对于100%的数据：N&lt;=100000，M&lt;=100000<br>（数据已经过加强^_^，保证在int64/long long数据范围内）</p><hr><p>线段树其实学会很久了<del>学了就忘</del>，现在要学主席树，先再来补一发</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxpoint 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'-'</span>) w=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _write(<span class="keyword">long</span> <span class="keyword">long</span> x)&#123;</span><br><span class="line"><span class="keyword">if</span> (x/<span class="number">10</span>&gt;<span class="number">0</span>) _write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">x=-x;</span><br><span class="line">&#125;</span><br><span class="line">_write(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> po_int,qu_es;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxpoint];</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> val,tag;</span><br><span class="line">&#125;tree[maxpoint*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> ro_ot)</span></span>&#123;</span><br><span class="line">tree[ro_ot].val=tree[ro_ot&lt;&lt;<span class="number">1</span>].val+tree[ro_ot&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> ro_ot,<span class="keyword">long</span> <span class="keyword">long</span> la,<span class="keyword">long</span> <span class="keyword">long</span> lb)</span></span>&#123;</span><br><span class="line">tree[ro_ot].tag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (la==lb) &#123;</span><br><span class="line">tree[ro_ot].val=a[la];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid=(la+lb)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(ro_ot&lt;&lt;<span class="number">1</span>,la,mid);</span><br><span class="line">build(ro_ot&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,lb);</span><br><span class="line">push_up(ro_ot);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">taging</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> ro_ot,<span class="keyword">long</span> <span class="keyword">long</span> la,<span class="keyword">long</span> <span class="keyword">long</span> lb,<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>&#123;</span><br><span class="line">tree[ro_ot].tag+=val;</span><br><span class="line">tree[ro_ot].val+=(lb-la+<span class="number">1</span>)*val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> ro_ot,<span class="keyword">long</span> <span class="keyword">long</span> la,<span class="keyword">long</span> <span class="keyword">long</span> lb)</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid=(lb+la)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">taging(ro_ot&lt;&lt;<span class="number">1</span>,la,mid,tree[ro_ot].tag);</span><br><span class="line">taging(ro_ot&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,lb,tree[ro_ot].tag);</span><br><span class="line">tree[ro_ot].tag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> check_la,<span class="keyword">long</span> <span class="keyword">long</span> check_lb,<span class="keyword">long</span> <span class="keyword">long</span> la,<span class="keyword">long</span> <span class="keyword">long</span> lb,<span class="keyword">long</span> <span class="keyword">long</span> ro_ot,<span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (check_la&lt;=la&amp;&amp;check_lb&gt;=lb)&#123;</span><br><span class="line">tree[ro_ot].val+=(lb-la+<span class="number">1</span>)*val;</span><br><span class="line">tree[ro_ot].tag+=val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid=(la+lb)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">push_down(ro_ot,la,lb);</span><br><span class="line"><span class="keyword">if</span> (check_la&lt;=mid) update(check_la,check_lb,la,mid,ro_ot&lt;&lt;<span class="number">1</span>,val);</span><br><span class="line"><span class="keyword">if</span> (check_lb&gt;mid)  update(check_la,check_lb,mid+<span class="number">1</span>,lb,ro_ot&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,val);</span><br><span class="line">push_up(ro_ot);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> check_la,<span class="keyword">long</span> <span class="keyword">long</span> check_lb,<span class="keyword">long</span> <span class="keyword">long</span> la,<span class="keyword">long</span> <span class="keyword">long</span> lb,<span class="keyword">long</span> <span class="keyword">long</span> ro_ot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (check_la&lt;=la&amp;&amp;check_lb&gt;=lb)&#123;</span><br><span class="line"><span class="keyword">return</span> tree[ro_ot].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid=(la+lb)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">push_down(ro_ot,la,lb);</span><br><span class="line"><span class="keyword">if</span> (check_la&lt;=mid) ans+=query(check_la,check_lb,la,mid,ro_ot&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (check_lb&gt;mid) ans+=query(check_la,check_lb,mid+<span class="number">1</span>,lb,ro_ot&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">push_up(ro_ot);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">po_int=read();qu_es=read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=po_int;i++)</span><br><span class="line">a[i]=read();</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,po_int);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> check_la,check_lb,val;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qu_es;i++)&#123;</span><br><span class="line">x=read();</span><br><span class="line"><span class="keyword">if</span> (x==<span class="number">1</span>)&#123;</span><br><span class="line">check_la=read();check_lb=read();val=read();</span><br><span class="line">update(check_la,check_lb,<span class="number">1</span>,po_int,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">check_la=read();check_lb=read();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;query(check_la,check_lb,<span class="number">1</span>,po_int,<span class="number">1</span>);<span class="comment">//write(query(check_la,check_lb,1,po_int,1));</span></span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Luogu </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>P3379【模板】最近公共祖先（LCA）</title>
      <link href="/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%88LCA%EF%BC%89/"/>
      <url>/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%88LCA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p> 如题，给定一棵有根多叉树，请求出指定两个点直接最近的公共祖先。</p><h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>第一行包含三个正整数N、M、S，分别表示树的结点个数、询问的个数和树根结点的序号。<br>接下来N-1行每行包含两个正整数x、y，表示x结点和y结点之间有一条直接连接的边（数据保证可以构成树）。<br>接下来M行每行包含两个正整数a、b，表示询问a结点和b结点的最近公共祖先。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>输出包含M行，每行包含一个正整数，依次为每一个询问的结果。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p>输入样例#1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">5 5 4</span><br><span class="line">3 1</span><br><span class="line">2 4</span><br><span class="line">5 1</span><br><span class="line">1 4</span><br><span class="line">2 4</span><br><span class="line">3 2</span><br><span class="line">3 5</span><br><span class="line">1 2</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure></p><p>输出样例#1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure></p><blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>时空限制：1000ms,128M<br>数据规模：<br>对于30%的数据：N&lt;=10，M&lt;=10<br>对于70%的数据：N&lt;=10000，M&lt;=10000<br>对于100%的数据：N&lt;=500000，M&lt;=500000</p></blockquote><hr><p>LCA一直以来是我比较苦恼<del>懒得看</del>的内容之一，周末抽空看了一下。</p><h2 id="Warning：本篇可能有大量假冒伪劣内容"><a href="#Warning：本篇可能有大量假冒伪劣内容" class="headerlink" title="Warning：本篇可能有大量假冒伪劣内容"></a>Warning：本篇可能有大量假冒伪劣内容</h2><p>关于变量：</p><blockquote><p>fa[site][tim]表示当前所在的数site向上跳 $2^tim$ 次后到达的数<br>lg[x]表示 $log_2(x)$ 向下取整后+1的 值 <del>QAQ不会打log</del><br>depth[site]表示当前数site的深度</p></blockquote><p>完整的Code://结合Code后才 可食用//QAQ我还是美国<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxpoint 500010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> po_int,qu_es,ro_ot;</span><br><span class="line"><span class="keyword">int</span> tim;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,next;</span><br><span class="line">&#125;a[<span class="number">2</span>*maxpoint+<span class="number">10</span>];<span class="comment">//已知在树中边数==节点数-1，因此可以直接用maxpoint ,又因为每条边要存2遍，所以再*2 </span></span><br><span class="line"><span class="keyword">int</span> head[maxpoint];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">tim++;</span><br><span class="line">a[tim].v=v;<span class="comment">//a[tim].u=u;</span></span><br><span class="line">a[tim].next=head[u];head[u]=tim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> depth[maxpoint];</span><br><span class="line"><span class="keyword">int</span> lg[maxpoint]; </span><br><span class="line"><span class="keyword">int</span> fa[maxpoint][<span class="number">23</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa_th)</span></span>&#123;</span><br><span class="line">depth[x]=depth[fa_th]+<span class="number">1</span>;</span><br><span class="line">fa[x][<span class="number">0</span>]=fa_th;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=depth[x];i++)</span><br><span class="line">fa[x][i]=fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=a[i].next)&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i].v!=fa_th) dfs(a[i].v,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (depth[x]&lt;depth[y])</span><br><span class="line">swap(x,y);</span><br><span class="line"><span class="keyword">while</span>(depth[x]&gt;depth[y])</span><br><span class="line">x=fa[x][lg[depth[x]-depth[y]]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span> (x==y)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k=lg[depth[x]]<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;</span><br><span class="line"><span class="keyword">if</span> (fa[x][k]!=fa[y][k])</span><br><span class="line">x=fa[x][k],y=fa[y][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> w=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'-'</span>) w=<span class="number">-1</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">'0'</span>;</span><br><span class="line">ch=getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x*w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> _write(<span class="keyword">int</span> x)&#123;</span><br><span class="line"><span class="keyword">if</span> (x/<span class="number">10</span>&gt;<span class="number">0</span>) _write(x/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">x=-x;</span><br><span class="line">&#125;</span><br><span class="line">_write(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//freopen("ans.txt","w",stdout);</span></span><br><span class="line"><span class="comment">//cin&gt;&gt;po_int&gt;&gt;qu_es&gt;&gt;ro_ot;</span></span><br><span class="line">po_int=read();qu_es=read();ro_ot=read();</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">lg[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=po_int;i++)</span><br><span class="line">lg[i]=lg[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;lg[i<span class="number">-1</span>]==i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;po_int;i++)&#123;</span><br><span class="line">x=read();y=read();<span class="comment">//cin&gt;&gt;x&gt;&gt;y;</span></span><br><span class="line">add(x,y);add(y,x);</span><br><span class="line">&#125;</span><br><span class="line">dfs(ro_ot,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=qu_es;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">write(lca(x,y)); <span class="built_in">putchar</span>(<span class="string">'\n'</span>);<span class="comment">//printf("%d\n",lca(x,y)); //cout&lt;&lt;lca(x,y)&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Luogu </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>做题记录</title>
      <link href="/history/"/>
      <url>/history/</url>
      
        <content type="html"><![CDATA[<p>这里是</p>]]></content>
      
      
      
        <tags>
            
            <tag> noip备战 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Day 0</title>
      <link href="/before-noip/"/>
      <url>/before-noip/</url>
      
        <content type="html"><![CDATA[<p>这大概是日记之类的东西……</p><p>打完第二场模拟赛，第一次A掉了T1，但教练还没公布名额分配的问题，只是先说了要停课……</p><p>希望能选上吧…</p><p>还有就是——开始努力吧……</p><p>（<a href="/post/history">做题记录</a>）</p>]]></content>
      
      
      
        <tags>
            
            <tag> noip备战 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这里原本是hexo默认文档的地方，暂且删除，权当庆祝一下新博客的建成吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 未分类 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
